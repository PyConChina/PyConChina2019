####################################################################
# 上海
####################################################################

speaker_shanghai_lucianoramalho:
  name: Luciano Ramalho
  name_en: Luciano Ramalho
  city_shanghai: 1
  avatar: ./asset/images/speakers/lucianoramalho.jpeg
  avatar_en: ../asset/images/speakers/lucianoramalho.jpeg
  short_intro: "《流畅的Python》作者"
  short_intro_en: "The author of Fluent Python"
  intro: "Luciano Ramalho 是 Fluent Python 的作者，这本书被翻译成 9 种语言出版。他也是 @ThoughtWorks 的首席顾问和 @garoahc，巴西的首个黑客空间的共同创始人。"
  intro_en: "Luciano Ramalho is the author of Fluent Python, published in 9 languages. He is a principal consultant at @ThoughtWorks and a co-founder of @garoahc, the first hackerspace in Brazil."
  shanghai_topic:
    title: "Python 的永恒之美"
    title_en: "The timeless beauty of Python"
    preview: "我热衷与学习程序语言的设计，并且从 1998 年就开始接触 Python。Python 是一个艺术品，这个演讲里我将会分享我个人认为 Python 中最美丽的部分。"
    preview_en: "I love to study the design of programming languages, and I’ve been coding in Python since 1998. Python is a masterpiece of design. This talk is about the parts of Python that I find are the most beautiful."
    slide: #
speaker_shanghai_arminronacher:
  name: Armin Ronacher
  name_en: Armin Ronacher
  city_shanghai: 1
  avatar: ./asset/images/speakers/arminronacher.png
  avatar_en: ../asset/images/speakers/arminronacher.png
  short_intro: "Armin Ronacher 是 Flask、Werkzeug、Jinja2、Click 等流行开源项目的作者。他关注于设计良好的系统和 API。目前开发一款名为 Sentry 的开源错误报告工具。"
  short_intro_en: "Armin Ronacher is the creator of the Flask, Jinja2, Werkzeug, Click, etc. He cares about well designed systems and APIs. He is currently working on Sentry, an Open Source crash reporting tool."
  intro: "Armin Ronacher 是 Flask、Werkzeug、Jinja2、Click 等流行开源项目的作者。他关注于设计良好的系统和 API。目前开发一款名为 Sentry 的开源错误报告工具。"
  intro_en: "Armin Ronacher is the creator of the Flask, Jinja2, Werkzeug, Click, etc. He cares about well designed systems and APIs. He is currently working on Sentry, an Open Source crash reporting tool."
  shanghai_topic:
    title: "待定"
    title_en: ""
    preview: ""
    preview_en: ""
    slide: #
speaker_shanghai_giampaolorodola:
  name: Giampaolo Rodola
  name_en: Giampaolo Rodola
  city_shanghai: 1
  avatar: ./asset/images/speakers/giampaolorodola.jpeg
  avatar_en: ../asset/images/speakers/giampaolorodola.jpeg
  short_intro: "Python 核心开发者"
  short_intro_en: "Python Core - Developer"
  intro: "我是来自意大利的 Giampaolo Rodola，从 2010 年开始我加入了 Python 的核心开发者的行列，同时我也是 <a href=\"https://github.com/giampaolo/psutil\">psutil</a> 和 <a href=\"https://github.com/giampaolo/pyftpdlib\">python FTP server libs</a> 的作者和维护者。你可以在<a href=\"http://grodola.blogspot.com/p/about.html?m=1\">这里</a>了解更多关于我的信息 "
  intro_en: "My name is Giampaolo Rodola, from Italy. I am a python core-dev since 2010 and the author and maintainer of <a href=\"https://github.com/giampaolo/psutil\">psutil</a> and <a href=\"https://github.com/giampaolo/pyftpdlib\">python FTP server libs</a>. You can read more about me <a href=\"http://grodola.blogspot.com/p/about.html?m=1\">HERE</a>"
  shanghai_topic:
    title: "加速 Python 中的文件传输和拷贝"
    title_en: "Speed up file transfers and file copies in Python"
    preview: ""
    preview_en: ""
    slide: #
speaker_shanghai_hsiaomingyang:
  name: Hsiaoming Yang
  name_en: Hsiaoming Yang
  city_shanghai: 1
  avatar: ./asset/images/speakers/hsiaomingyang.jpg
  avatar_en: ../asset/images/speakers/hsiaomingyang.jpg
  short_intro: "Hsiaoming Yang 是 Authlib 和 Typlog 的作者，Flask 等项目的维护者，Hsiaoming Ltd 创始人。"
  short_intro_en: "Founder of Hsiaoming Ltd. Maintainer of Flask. Running Authlib and Typlog."
  intro: "Hsiaoming Yang 是 Authlib 和 Typlog 的作者，Flask 等项目的维护者，Hsiaoming Ltd 创始人。"
  intro_en: "Founder of Hsiaoming Ltd. Maintainer of Flask. Running Authlib and Typlog."
  shanghai_topic:
    title: "危险的 Flask"
    title_en: "The dangerous Flask"
    preview: "关于 Flask 安全性的演讲 (itsdangerous, JWT, JWS)"
    preview_en: "A talk about security in Flask (itsdangerous, JWT, JWS)"
    slide: #
speaker_shanghai_dave_glover:
  name: Dave Glover
  name_en: Dave Glover
  city_shanghai: 1
  avatar: ./asset/images/speakers/dave_glover.png
  avatar_en: ../asset/images/speakers/dave_glover.png
  short_intro: "Microsoft Developer Relations"
  short_intro_en: "Microsoft Developer Relations"
  intro: "我记不清什么时候开始沉迷于软件开发，我写作 C# 与 Python 的代码，熟练操作 Windows 和 Linux 系统，尝试涉足硬件领域。我曾在英国和澳大利亚的微软分部工作，跟客户，合作伙伴和开发者社区都打过交道。这些年过去，我涉猎了许多领域，包括 Windows 和移动端，web 开发，IoT，通讯和云计算。我生性对一切好奇，热爱去学习，并且与开发者社区建立联系。"
  intro_en: "I am a passionate software developer for as long as I can remember, I dream and code in C# and Python, hang out on Windows and Linux, and dabble in maker hardware. I have worked for Microsoft in the UK and Australia across customers, partners and the developer community. Over the years I have covered a broad range of technologies, from Windows and mobile, Web dev, IoT, communications, and cloud-centric computing. I am curious by nature, love to learn and connect with the developer community."
  shanghai_topic:
    title: "构建 Python 物联网（IoT）图像分类解决方案并与Azure无服务器功能集成"
    title_en: "Build a Python Internet of Things (IoT) Image Classification solution and integrate with Azure Serverless Functions"
    preview: "这个演讲将会十分有趣，你会学到如何使用 Python 构建图片分类系统和文字转语音解决方案，这可以应用于超市收银台，服务视障人士。接下来，我将讲述如何将图像分类解决方案与 Python Azure 集成，并连接到一个实时web仪表板上。 通过这次演讲你将会学到如何用 Python 和免费的 Azure 服务来构建一个 IoT 图片分类系统，并用它来帮助你身边的人们。"
    preview_en: "This is a fun session and you will learn how to create a Python Image Classification and Text to Speech solution for vision impaired people scanning fruit and vegetables at a shop checkout. Next, you will learn how to integrate the image classification solution with Python Azure Functions and connect to a real-time web dashboard. From this session, you will learn how to build a beautiful Python based Internet of Things Image Classification solution using free of charge services from Azure and impress your friends and colleagues."
    slide: #
speaker_shanghai_huili:
  name: 李辉 
  name_en: Grey Li
  city_shanghai: 1
  avatar: ./asset/images/speakers/lihui.jpg
  avatar_en: ../asset/images/speakers/lihui.jpg
  short_intro: "独立 Web 开发者，Flask 维护者，《Flask Web 开发实战》作者。"
  short_intro_en: "Freelance web developer, maintainer of Flask, author of \"Python Web Development with Flask\"."
  intro: "独立 Web 开发者，Flask 维护者，《Flask Web 开发实战》作者。"
  intro_en: "Freelance web developer, maintainer of Flask, author of \"Python Web Development with Flask\"."
  shanghai_topic:
    title: "基于 Flask 的 REST API 开发指南"
    title_en: "Building REST API with Flask"
    preview: "作为一个微框架，轻量灵活的 Flask 很适合用来开发 REST API 服务。相对于 Django REST Framework 和 APIStar，Flask 有什么优势和缺点？为了减少工作量，我们通常会使用一些工具来辅助编写，面对 Flask-RESTful、Flask-RESTPlus、Flask-API、Webargs、Marshmallow 等扩展和工具库，我们应该如何选择？虽然我们经常使用 REST API 这个名称，但是大部分的 API 都不够 RESTful，那么什么样的 API 才能算是 REST API？在这个议题中，我们将对这几个问题逐一进行探讨，并了解如何使用 Flask 编写出功能完善的 REST API 服务。"
    preview_en: "As a micro framework, Flask is very suitable for developing REST API. What is the merits and drawback of Flask comparing to  Django REST Framework and APIStar? In order to simplify our work, we will use some tools to help us. What should we choose between several tools and extension like Flask-RESTful、Flask-RESTPlus、Flask-API、Webargs、Marshmallow? Although we usually use REST API to name our API, most of them are not \"RESTful\" enough. Therefore, which kind of API is the truly REST API? In this topic speech, we will discuss these questions and introduce how to write a fully functional REST API using Flask."
    slide: #
speaker_shanghai_jiahualu:
  name: 陆佳华 
  name_en: Jiahua Lu
  city_shanghai: 1
  avatar: ./asset/images/speakers/lujiahua.jpg
  avatar_en: ../asset/images/speakers/lujiahua.jpg
  short_intro: "Xilinx - 研究院 学术与创新生态高级经理"
  short_intro_en: "Senior Manager of Xilinx Academic and Innovative Ecology institude"
  intro: "陆佳华先生于2006年加入Xilinx公司，现任Xilinx研究院 学术与创新生态高级经理，领导Xilinx公司在亚太区的开源创新工作其包括开源社区，前沿技术初创孵化，学术合作等工作。陆佳华先生撰写了全球第一本NetFPGA使用指南，以及第一本Zynq开发者实战指南。陆佳华同时还兼任中国计算机学会体系结构专委会常务委员，信息技术新工科产学研联盟-可定制计算人才培养工作委员会 秘书长等社会职务"
  intro_en: "Mr. Lu joins in Xilinx in the year 2006. Now he is the senior manager of Xilinx Academic and Innovative Ecology institute, leading Xilinx's open-source innovation work in the Asia Pacific region, including the open-source community, cutting-edge technology startup incubation, academic collaboration, etc. Mr. Lu wrote the world's first using guide of NetFPGA and developer's guide of Zynq. He is also a standing committee of CCF TCARC and secretary-general of Information Technology New Engineering, Industry, Education and Research Alliance - Customizable Computing Talent Training Committee."
  shanghai_topic:
    title: "当Python遇上FPGA – Pynq开源项目的实践与体会"
    title_en: "When Python meet FPGA -- the experience and feeling of Pynq opensource project"
    preview: "Pynq项目是Xilinx研究院发起的将丰富的Python生态与FPGA硬件编程结合的开源框架。这是全球第一次尝试将面向生产力的Python语言和面向应用加速的可定制计算架构（Domain Specific Architecture）结合。软件开发者通过Python编程就可以将FPGA并行计算和可灵活配置的特性应用于端设备，适用于加速广泛的应用。而硬件开发者（芯片设计）通过Pynq框架可以快速获得Python支持加速其数据分析，展示等。目前在PYNQ开源社区中已经提供了上百个硬件加速Overlay，其中包括人工智能推理、机器视觉、视频转码、数据压缩，工业物联网等。报告中并将介绍利用该框架进行ROS， Ray，OpenCV等开源框架的实践，并分析Python语言对FPGA进行编程应用开发时对FPGA器件的影响，性能结果等，并介绍项目后续开发的线路图。"
    preview_en: "Pynq project is an open-source project which starts by Xilinx institute in order to mix Python ecosystem and FPGA hardware programming.  This is the world's first try to mix Python and Domain Specific Architecture. Software developers can apply FPGA parallel computing and flexible configuration features to end devices through Python programming, which is suitable for accelerating a wide range of applications. And hardware developers (chip design) can quickly get Python support through the Pynq framework to accelerate their data analysis, display, etc. Hundreds of hardware-accelerated Overlays have been provided in the PYNQ open source community, including artificial intelligence reasoning, machine vision, video transcoding, data compression, industrial Internet of Things, etc. The report will introduce the practice of using the framework for open source frameworks such as ROS, Ray, OpenCV, and analyze the impact of Python language on FPGA devices during programming application development, performance results, etc., And introduce the road map for subsequent development of the project."
    slide: #
speaker_shanghai_laiqiangding:
  name: 丁来强 
  name_en: Laiqiang Ding
  city_shanghai: 1
  avatar: ./asset/images/speakers/dinglaiqiang.jpg
  avatar_en: ../asset/images/speakers/dinglaiqiang.jpg
  short_intro: "阿里云日志服务上海负责人"
  short_intro_en: "Leader of Ali cloud service in Shanghai"
  intro: "从业超过10年，长期任职于大数据平台DevSecOps、AIOps的构建相关领域，曾任大数据公司顶级公司Splunk高级架构师等。乐于分享，在历届PyCon、云栖等分享过十几场演讲或直播，覆盖大数据分析处理、调度监测、可视化分析与Python核心系列等十多个不同议题系列，观众赞誉极高。"
  intro_en: "More than 10 years of work experience in DevSecOps、AIOps and so on. Former Splunk Senior Architect in a top company in big data. Willing to share, make more than a dozen of speech or live in PyCon and Yunqi. Topic including several fields like Big Data Analysis Processing, Scheduling Monitoring, Visual Analysis, and Python Core Series. These speeches gain warmly welcome by the listeners."
  shanghai_topic:
    title: "开源AIOps数据中台搭建与Python的作用"
    title_en: "Building of open source AIOps data center and the role of Python"
    preview: "根据Gartner的报告，AIOps将在未来5-10年落地开花，并集中统一各种Ops平台（Dev、IT、Net、Sec），本议题介绍AIOps的核心作用、相关工程难点（数据采集、数据中台、智能算法、自动化等）与开源方案选择，并介绍Python在其中的主要作用，覆盖开源方案有：Kafka、ELK、K8S、Prometheus、Grafana、Graphite、Ansible、Airflow、Flink、TensorFlow、OpenTelemetry等"
    preview_en: "According to the report by Gartner, AIOps will be widely used soon ( about 5 to 10 years), and it will use several Ops platform like （Dev、IT、Net、Sec）. In this speech, I'll introduce you about the core features of AIOps, difficult point of it  (Data acquisition, data center, intelligent algorithm, automation... ) How to select an open-source program of your project and introduce the importance of Python in it. This speech will including open-source program Kafka、ELK、K8S、Prometheus、Grafana、Graphite、Ansible、Airflow、Flink、TensorFlow、OpenTelemetry etc."
    slide: #
speaker_shanghai_zhangxiaojie:
  name: 张校捷 
  name_en: Xiaojie Zhang
  city_shanghai: 1
  avatar: ./asset/images/speakers/zhangjiaojie.jpg
  avatar_en: ../asset/images/speakers/zhangjiaojie.jpg
  short_intro: "英伟达 - 资深深度学习架构工程师"
  short_intro_en: "NVIDIA - Senior Deep Learning Architecture Engineer"
  intro: "目前主要在公司负责基于GPU的深度学习框架的优化和新特性的开发。由于个人工作的原因，对于基于Python的深度学习框架有一定的研究，包括TensorFlow和PyTorch等。这次希望能给大家分享一些有关如何使用Python训练和部署低精度模型，希望对大家在深度学习方面的工作有所帮助。"
  intro_en: "Currently responsible for deep learning framework optimization and new features development base on GPU. Due to my work, I have studied some deep learning frameworks based on Python including TensorFlow and PyTorch, etc. I hope to share some experience about how to use Python training and deploying low-precision models. I hope it will be helpful to your work about deep learning."
  shanghai_topic:
    title: "使用Python训练和部署低精度模型"
    title_en: "Using Python to train and to deploy low-precision model"
    preview: "随着深度学习技术的不断进步，为了加快深度学习模型的运算速度，以及节约深度学习模型部署使用的内存，使用低精度浮点表示（半精度或者定点整数）来对深度学习模型进行训练正在逐渐地被应用于实践之中。本次演讲主要使用了TensorFlow的Python前端，介绍了如何使用Python来构建低精度模型，并且将该模型应用于训练之中，并且进一步将模型导出成TensorRT能够使用并运行的格式，从而完成模型的部署。希望对大家训练和上线深度学习模型有所帮助。"
    preview_en: "With the continuous improvement of deep learning technology, in order to fasten deep learning model's calculating speed and save the RAM it uses, using low-precision float (Semi-precision or fixed-point integer) to train deep learning model is used by more and more people nowadays. This speech about Python frontend of TensorFlow, I will introduce about how to use Python to construct a low-precision model and use it into training. What's more, export it as the format that can be used in TensorRT and finish the deployment of the model. I hope this speech will help you guys about training and deploying deep learning model."
    slide: #
speaker_shanghai_tengjingmeina:
  name: 藤井美娜 
  name_en: 藤井美娜
  city_shanghai: 1
  avatar: ./asset/images/speakers/tengjingmeina.jpg
  avatar_en: ../asset/images/speakers/tengjingmeina.jpg
  short_intro: "机器学习工程师/数据科学家"
  short_intro_en: "Machine Learning Engineer/Data Scientist"
  intro: "现任GVA TECH的日本第一个人工智能法律服务AI-CON的多语言系统开发负责人。研究专业是语言学和中日文自然语言处理。"
  intro_en: "Currently the head of multi-language system development for AI-CON, the first artificial intelligence legal service in Japan. Focus on linguistics and Chinese and Japanese natural language processing."
  shanghai_topic:
    title: "Python的NLP实践分享-如何实现合同风险预测模型"
    title_en: "Python's NLP Practical Sharing-how to implement contract risk prediction model"
    preview: "本演讲深入浅出的介绍用 Python 做自然语言处理 (NLP) 的理论与实战应用，并特别在多语言挑战和法律文本处理上加大力道，力图在30分钟内给听众以全新视野与启发。内容主要分为3段：<ol><li>Python NLP 入门<br />介绍用 Python 做汉语 NLP 的理论基础和必备工具。</li><li>多语言 NLP 攻略<br />处理其他语言的 NLP 工具、中文分词和日文分词的不同点、多语言 NLP 的注意事项等。</li><li>“Python 合同风险预测模型”实战经验分享<br />通过解析模型构建过程，包括 EDA、Cosine Similarity、BLUE、ROUGE 等类似度算法的结果比较、文章语义分析等，具体提升听众处理法律文本的能力。</li></ol>人和语言总是离不开的，NLP可以处理森罗万象的生活中的语言现象，我希望通过这次的实战应用的内容，大家可以得到一些启发用Python去挑战自己感兴趣的领域的NLP。"
    preview_en: "This speech will introduce the theory and practical application of natural language processing in Python, especially the multi-language challenge and legal text processing. I'll try to inspire listeners in 30 minutes. The content is divided into 3 segments:<ol><li>Introduction of Python NLP<br />Introduction of Python as NLP theoretical basis and utility tools.</li><li>NLP in several languages<bt />NLP tool for other languages, different points of Chinese and Japanese practicals, precautions of NLP in multi-languages.</li><li>Practical sharing of Python contract risk prediction model<br />Through the analysis of the model construction process, including EDA、Cosine Similarity、BLUE、ROUGE and some other similar algorithms' result comparisons and article semantic analysis, enhance the ability of the audience to process the legal texts.</li></ol>We cannot split human and language, NLP is able to process all the phenomenon of languages. I hope you can gain some points and try to use Python processing natural language in your field."
    slide: #
speaker_shanghai_liqiyu:
  name: 李齐雨
  name_en: Qiyu Li
  city_shanghai: 1
  avatar: ./asset/images/speakers/liqiyu.jpg
  avatar_en: ../asset/images/speakers/liqiyu.jpg
  short_intro: "LeetCode中国后端架构师，后端团队负责人"
  short_intro_en: "LeetCode china Backend architect, leader of backend team"
  intro: "LeetCode中国后端架构师，后端团队负责人"
  intro_en: "LeetCode china Backend architect, leader of backend team"
  shanghai_topic:
    title: "Django 中的 GraphQL"
    title_en: "GraphQL in Django"
    preview: "比起RESTful风格的api，GraphQL从公布到现在依然没有普及开来。很多公司的开发者一直处于观望状态。LeetCode将全部接口迁移到GraphQL已有将近两年的时间，直到现在我们主站将近十几万行Django代码，几乎全部的接口都是GraphQL。本次演讲的主题主要是分享LeetCode是如何使用GraphQL来减轻开发的工作以及我们是如何解决使用GraphQL中发生的问题的。"
    preview_en: "Comparing to RESTful style API, GraphQL has not been popular since its publication. Many developers still take a wait-and-see attitude. LeetCode migrates all the ports to GraphQL for two years. Now our site which has hundreds of thousands of lines of codes, nearly all of the ports are GraphQL. This speech will introduce you about how LeetCode using GraphQL in order to relieve development work and how we solving problems about using GraphQL."
    slide: #
speaker_shanghai_zhangjiayuan:
  name: 张佳圆
  name_en: Jiayuan Zhang
  city_shanghai: 1
  avatar: ./asset/images/speakers/zhangjiayuan.jpg
  avatar_en: ../asset/images/speakers/zhangjiayuan.jpg
  short_intro: "爱奇艺 - 后端开发工程师"
  short_intro_en: "Aiqiyi - backend development engineer"
  intro: "Requests, Werkzeug 等开源项目贡献者，多年 Python 开发经验，目前专注于 Python Web 开发。PyCon China 2018 和 CSDN Python 开发者日讲师。"
  intro_en: "Contributors of Requests, Werkzeug  etc. open source project, and has years of Python development experience. Now he focuses on Python Web development. Speakers of PyCon China 2018 and CSDN Python develpers day."
  shanghai_topic:
    title: "GIL 的过去和未来"
    title_en: "The Past and Future of GIL"
    preview: "什么是 GIL？CPython 为什么要引入 GIL？它为了解决什么问题？为什么 Python 这么慢？如何摆脱 GIL 的限制？本次分享将带领大家了解 GIL 的方方面面，从 GIL 的产生历史背景，GIL 的原理分析，到如何在应用层上避开 GIL，并聊一聊 GIL 的未来，PEP 554 Multiple Interpreters in the Stdlib 的提出能否解决 GIL 的问题？"
    preview_en: "What is GIL? Why CPython import GIL and what problem does it solve? Why Python so slow? How to get rid of GIL? This speech will share every sides of GIL, including its history, principle analysis, how to avoid GIL in application layer and the future about GIL. Will the PEP 554 Multiple Interpreters in the Stdlib solve problem of GIL?"
    slide: #
speaker_shanghai_Elizaveta_Shashkova:
  name: Elizaveta Shashkova
  name_en: Elizaveta Shashkova
  city_shanghai: 1
  avatar: ./asset/images/speakers/Elizaveta_Shashkova.png
  avatar_en: ../asset/images/speakers/Elizaveta_Shashkova.png
  short_intro: "JetBrains 公司 PyCharm IDE开发者"
  short_intro_en: "Software Developer of the PyCharm IDE at JetBrains. "
  intro: "专注于 Python debugger 和数据科学工具的开发"
  intro_en: "Working on the Python debugger and Data Science tools."
  shanghai_topic:
    title: "可视化的 Python debugger：从内部原理到日常使用"
    title_en: "Python Visual Debugger: from internals to daily use"
    preview: "在这个演讲中我将会分享 Python debugger 的内部原理，它们有什么局限，以及近几年来在我们努力之下取得了什么突破。这个演讲不仅会讨论本地运行 debug，也同时会涉及到远程 debug 以及对不同文件格式的 debug。最后，我会分享一些在 PyCharm IDE 里使用可视化 debugger 的实用小技巧。"
    preview_en: "In this talk we’ll learn how Python debuggers work internally. We’ll learn which bottlenecks and limitations they have, and which improvements were implemented in this area in the past few years. During the talk we’ll consider not only local process debugging, but also remote cases and debugging of different types of files. After that we’ll learn useful techniques for daily use on the example of visual debugger in the PyCharm IDE."
    slide: #
speaker_shanghai_lujianhui:
  name: 卢建晖
  name_en: Jianhui Lu
  city_shanghai: 1
  avatar: ./asset/images/volunteers/default.jpg
  avatar_en: ../asset/images/volunteers/default.jpg
  short_intro: "微软最有价值专家"
  short_intro_en: "Microsoft's most valuable expert"
  intro: ""
  intro_en: ""
  shanghai_topic:
    title: "云中起舞—— Python的人工智能开发在微软云中的应用"
    title_en: "Dance in the cloud --- Application of Python AI in Microsoft Cloud"
    preview: "微软从开发工具到云端方案对Python都有很好的支持。 Microsoft Azure Machine Learing Service 结合Python让人工智能应用开发更加快速便捷，不论从模型训练，到模型调优，再到模型部署都有很大帮助。而 Visual Studio Code 有非常棒的Python插件，支持服务端到云端以及人工智能应用开发。本课程通过使用Visual Studio Code 结合Microsoft Azure  Machine 完成一个基于Python从训练，调优再到模型云端部署的现代化人工智能应用场景，并结合Azure DevOps 完成CI/CD的开发管理。"
    preview_en: "Microsoft has great support for Python from development tools to cloud solutions. The combination of Microsoft Azure Machine Learing Service and Python will catalyze the AI application development.   Visual Studio Code also has a good Python extension. It can support AI application development from sever side to cloud side, This course will use Visual Studio Code and Microsoft Azure  Machine to construct a modern AI application scenarios based on Python from training, tuning to cloud deployment of model, and using Azure DevOps to complete development managment of CI/CD."
    slide: #
speaker_shanghai_liuzheng:
  name: 刘征
  name_en: Zheng Liu
  city_shanghai: 1
  avatar: ./asset/images/speakers/liuzheng.jpg
  avatar_en: ../asset/images/speakers/liuzheng.jpg
  short_intro: "Elastic公司社区布道师 / 中国DevOps社区核心组织者"
  short_intro_en: "Elastic公司社区布道师 / 中国DevOps社区核心组织者"
  intro: "《DevOps Handbook》《The Site Reliability Workbook》译者；精通DevOps/SRE/ITSM等理论体系和相关实践的落地实现。致力于在全国范围内通过社区推广DevOps的理念、技术和实践。推动开源Elastic Stack技术堆栈的应用，包括运维大数据分析平台、云原生服务治理、APM全链路监控和AIOps等使用场景。"
  intro_en: "《DevOps Handbook》《The Site Reliability Workbook》译者；精通DevOps/SRE/ITSM等理论体系和相关实践的落地实现。致力于在全国范围内通过社区推广DevOps的理念、技术和实践。推动开源Elastic Stack技术堆栈的应用，包括运维大数据分析平台、云原生服务治理、APM全链路监控和AIOps等使用场景。"
  shanghai_topic:
    title: "分层次构建应用系统的可观测性"
    title_en: "分层次构建应用系统的可观测性"
    preview: "在云计算环境中，微服务和容器等技术已经将应用系统运行态的复杂度再次提高，可观测性逐渐成为软件工程师们不可回避的问题。日志、指标和APM就是可观测性所谓的一体三面，需要先将以上三个方面都整合在统一的数据后台里，才可以进行有效的搜索、关联、索引和分析，同时还需要运用机器学习的辅佐来降低人工系统排错分析的难度和成本。本演讲还将通过Elastic Stack技术栈来展示对可观测性的应对之道和效果。"
    preview_en: "在云计算环境中，微服务和容器等技术已经将应用系统运行态的复杂度再次提高，可观测性逐渐成为软件工程师们不可回避的问题。日志、指标和APM就是可观测性所谓的一体三面，需要先将以上三个方面都整合在统一的数据后台里，才可以进行有效的搜索、关联、索引和分析，同时还需要运用机器学习的辅佐来降低人工系统排错分析的难度和成本。本演讲还将通过Elastic Stack技术栈来展示对可观测性的应对之道和效果。"
    slide: #
speaker_shanghai_qinxuye:
  name: 秦续业
  name_en: Xuye Qin
  city_shanghai: 1
  avatar: ./asset/images/speakers/qinxuye.png
  avatar_en: ../asset/images/speakers/qinxuye.png
  short_intro: "阿里巴巴技术专家"
  short_intro_en: "阿里巴巴技术专家"
  intro: "现就职于阿里云计算平台事业部，担任 Mars 项目的核心开发者和架构师。 "
  intro_en: "现就职于阿里云计算平台事业部，担任 Mars 项目的核心开发者和架构师。 "
  shanghai_topic:
    title: "Mars：numpy 与 pandas 的并行和分布式加速器 "
    title_en: "Mars：numpy 与 pandas 的并行和分布式加速器 "
    preview: "Mars 已经于2018年11月开源（https://github.com/mars-project/mars）。目前，Mars 能将超过 70% 的 numpy 常见接口自动并行和分布式化，且正在大规模实现 pandas 接口的自动并行。那么 Mars 是如何自动将 numpy 和 pandas 等工具自动并行和分布式化的？Mars 在演进过程中又碰到了什么样的难题？Mars 的性能如何？关注系统设计的同学能从 Mars 的发展过程中得到什么经验教训？在这个演讲里都会得到解答。"
    preview_en: "Mars 已经于2018年11月开源（https://github.com/mars-project/mars）。目前，Mars 能将超过 70% 的 numpy 常见接口自动并行和分布式化，且正在大规模实现 pandas 接口的自动并行。那么 Mars 是如何自动将 numpy 和 pandas 等工具自动并行和分布式化的？Mars 在演进过程中又碰到了什么样的难题？Mars 的性能如何？关注系统设计的同学能从 Mars 的发展过程中得到什么经验教训？在这个演讲里都会得到解答。"
    slide: #
speaker_shanghai_laike9m:
  name: laike9m
  name_en: laike9m
  city_shanghai: 1
  avatar: ./asset/images/speakers/laike9m.png
  avatar_en: ../asset/images/speakers/laike9m.png
  short_intro: "Google软件工程师"
  short_intro_en: "Google software engineer"
  intro: "Google 软件工程师，从 2012 年开始使用 Python。《捕蛇者说》播客创始人。 "
  intro_en: "Working for Google since 2016, using Python since 2012. "
  shanghai_topic:
    title: "Python 调试新思路"
    title_en: "New ideas on Python debugging"
    preview: ""
    preview_en: ""
    slide: #
speaker_shanghai_huili:
  name: 李辉
  name_en: Grey Li
  city_shanghai: 1
  avatar: ./asset/images/speakers/lihui.jpg
  avatar_en: ../asset/images/speakers/lihui.jpg
  short_intro: "独立 Web 开发者，Flask 维护者，《Flask Web 开发实战》作者。"
  short_intro_en: "Freelance web developer, maintainer of Flask, author of \"Python Web Development with Flask\"."
  intro: "独立 Web 开发者，Flask 维护者，《Flask Web 开发实战》作者。"
  intro_en: "Freelance web developer, maintainer of Flask, author of \"Python Web Development with Flask\"."
  shanghai_topic:
    title: "Python 虚拟环境和依赖管理工具大乱斗"
    title_en: "Fighting among Python virtual environment and dependency management tools"
    preview: "大多数人都会在 Python 虚拟环境和依赖管理的路上经历重重困难。一开始，你使用 pip + virtualenv + requirements.txt 的工具组合，或者再加上 virtualenvwrapper；接着，更高级的新东西出现了。Pipenv 号称新一代 Python 项目环境和依赖管理工具，打算替代上面的复杂组合，但是发展并不顺利；接着，竞争者出现了，其中实力最强的 Poetry 除了可以替代 Pipenv 来管理依赖之外，甚至还可以让你不用写 setup.py。故事就这样结束了吗？当然没有，尚在草案阶段的 PEP 582 在一边虎视眈眈，试图终结这一切混乱……"
    preview_en: "Most of us will face multiple difficulties in Python virtual environment and dependency. At first, you may use virtualenv + requirements.txt and probably with virtualenvwrapper; Then, more new things appear. Pipenv claims itself as a new generation of Python project environment and dependency management tools. It wants to replace those things mentioned above, but it seems that it doesn't do well. After that, more competitors come out. Poetry is the best one between them, it is able to manage dependency as Pipenv. What is more, it can even let you not to write setup.py. Is this the end of the story? Of course not, PEP 582, which still in draft stage, is on the sidelines, trying to end all this chaos."
    slide: #
speaker_shanghai_zhaoqiangchen:
  name: 陈照强
  name_en: Zhaoqiang Chen
  city_shanghai: 1
  avatar: ./asset/images/speakers/chenzhaoqiang.png
  avatar_en: ../asset/images/speakers/chenzhaoqiang.png
  short_intro: "中科院上海药物所高级研究院 高级研究员. "
  short_intro_en: "Shanghai Institute of Advanced Drugs, Chinese Academy of Sciences Senior researcher. "
  intro: "开发药物研发相关软件D3Pockets; 利用sphinx制作网站：http://pymol.chenzhaoqiang.com/"
  intro_en: "He developes D3Pockets which is a software related to medicine reserch; Using sphinx making website http://pymol.chenzhaoqiang.com/"
  shanghai_topic:
    title: "Sphinx制作WEB文档"
    title_en: "Using spinx to make WEB document"
    preview: "Sphinx 是一种工具，它允许开发人员以纯文本格式编写文档，可以输出各种文档，如PDF, HTML等。Sphinx 是用 Python 编写的，并且最初是为 Python 语言文档而创建，多个项目都是用sphinx工具制作的文档，如：matplotlib, scrapy, 等。默认情况下，Sphinx 会为 Python 突出显示代码，但它还允许定义其他编程语言，比如 C 和 Ruby。和MarkDown 相比，它复杂一点，但灵活度更高，制作的文档更加精美，支持自定义语法。在我看来，markdown 好比一张纸，而sphinx好比一本书。如果你觉得你要记录的东西很多，不妨试试sphinx。"
    preview_en: "Sphinx is a tool which allows developers to write their document in plain text and output several formats like PDF, HTML, etc. Sphinx is written in Python and its original design aim is to help to make Python document. And many projects are using sphinx to write their document, for example, matplotlib, scrapy... Sphinx will high light Python codes in default, but it still supports other programming languages like C and Ruby. Comparing to MarkDown, it is a bit more complicated but with higher flexibility and can make a more beautiful document. It also supports customize grammar. In my point of view, markdown is a piece of paper and sphinx is a book. If you want to record many things, why not try to use sphinx?"
    slide: #
speaker_shanghai_xiaotan:
  name: 谭啸
  name_en: Xiao Tan
  city_shanghai: 1
  avatar: ./asset/images/speakers/tanxiao.jpg
  avatar_en: ../asset/images/speakers/tanxiao.jpg
  short_intro: "蚂蚁金服开发工程师"
  short_intro_en: "Developer of Ant Fincial Inc."
  intro: "蚂蚁金服开发工程师"
  intro_en: "Developer of Ant Fincial Inc."
  shanghai_topic:
    title: "500行Python写一个渲染器 "
    title_en: "Make a renderer within 500 lines Python codes"
    preview: "图形学是很有意思的一门学科，用简洁优雅的Python来实现图形学算法，更是一件充满了情怀和乐趣的事。在这个主题中我将分享用 Python 实现一个简单的软件渲染器的过程中遇到的一些有意思的事情。"
    preview_en: "Graphics is an interesting subject, so using elegant Python code to implement algorithm is also a lovely diversion. In this speech, I'll share some funny things in the process of using Python to implement a simple software renderer"
    slide: #
speaker_shanghai_congweisong:
  name: 宋丛威
  name_en: William Song
  city_shanghai: 1
  avatar: ./asset/images/speakers/songcongwei.jpg
  avatar_en: ../asset/images/speakers/songcongwei.jpg
  short_intro: "浙江工业大学之江学院"
  short_intro_en: "Zhijiang College of zjut"
  intro: "讲师，浙大数学系理学博士. 目前关注机器学习，我的梦想是强人工智能"
  intro_en: "Assistant, PhD of Zhejiang University. I am Interested in Machine Learning，and my dream is the strong AI"
  shanghai_topic:
    title: "基于OwlReady2的人机交互"
    title_en: "Human–Machine Interaction based on OwlReady2"
    preview: "OWL是用于本体论知识管理的描述语言，而OwlReady2是它的Python接口，OwlReady2封装了推理引擎HermiT和Pellet, 可以进行基于描述逻辑 (DLs) 的推理。利用Python的动态编程功能，实现具有推理能力的人机对话系统。为使用自然语言，还建立了一个文法解析模块。系统可以通过简单对话任务的测试。"
    preview_en: "OWL is a description language for the management of ontological knowledge, and OwlReady2 is its Python interface, that encapsulates the reasoning engine HermiT and Pellet, and can make reasoning based on description logics (DLs). Utilizing Python's dynamic programming, the human-machine dialogue system with reasoning ability based on OwlReady2 is realized. In order to use natural language, a grammar parsing module is built. The system can pass the testing of simple dialogue task."
    slide: #
####################################################################
# 北京
####################################################################
speaker_beijing_jintaozhang:
  name: 张晋涛
  name_en: Jintao Zhang
  city_beijing: 1
  avatar: ./asset/images/speakers/zhangjintao.jpg
  avatar_en: ../asset/images/speakers/zhangjintao.jpg
  short_intro: "网易有道资深运维开发"
  short_intro_en: "Senior Operations and Maintenance Developer of NetEase Inc."
  intro: "负责容器化及平台化开发，Kubernetes 从上手到实践作者"
  intro_en: "Responsible for the development of container and platform. He is the author of the book: Kubernets: from getting started to practicing."
  shanghai_topic:
    title: "云原生时代下 Python 开发的新体验"
    title_en: "A new experience of Python development in the Cloud Native"
    preview: "Kubernetes 已经成为容器编排领域的事实标准，各公司及团队都在开始使用或逐步探索如何将其用于生产环境中。而多数情况下 我们希望能通过 Kubernetes 提高团队整体的研发效率以及提高服务部署及扩缩容的效率，serverless 并不是一个很新的概念，但在云原生时代下，我们有了更多可能性和更多玩法，希望能与大家分享云原生时代下 Python 开发结合 serverless 的体验，以及在此过程中的探索和实践。"
    preview_en: "Kubernetes has become the de facto standard in the field of container orchestration, and companies and teams are beginning to use or gradually explore how to use them in production environments. In most cases, we hope to improve the overall R&D efficiency of the team and improve the efficiency of service deployment and expansion and expansion through Kubernetes. Serverless is not a very new concept, but in the cloud era, we have more possibilities and More gameplay, I hope to share with you the experience of Python development combined with serverless in the Cloud Native, as well as exploration and practice in this process."
    slide: #
speaker_beijing_lianghongfei:
  name: 费良宏
  name_en: Lianghong Fei
  city_beijing: 1
  avatar: ./asset/images/speakers/feilianghong.jpg
  avatar_en: ../asset/images/speakers/feilianghong.jpg
  short_intro: "Amazon Web Services"
  short_intro_en: "Amazon Web Services"
  intro: "作为Principal Evangelist 任职于AWS,主要专注于云计算以及互联网等技术领域。其拥有超过20年在IT行业以及软件开发领域的工作经验；曾经任职于Microsoft、Apple 等知名企业，任职架构师、技术顾问等职务，参与过多个大型软件项目的设计、开发与项目管理；并于2009年开始，从事与云计算领域相关的技术工作；研究方向主要是软件架构的演进，尤其是云计算方面的架构实践，并擅长Web应用、移动应用以及机器学习等的开发。"
  intro_en: "Lianghong Fei is a Principal Evangelist at Amazon Web Services, where he leverages his 20+ years of experience to support innovation and to help startups and companies bring their ideas to live by the power of Cloud. He focuses on software development and cloud native architectures as well as the technical and business impact of Machine Learning and data analytics. Prior to joining AWS, he worked at Apple and Microsoft."
  shanghai_topic:
    title: "在30分钟内迁移PythonWeb应用到无服务器"
    title_en: "Migrating your Python Web app to Serverlessin 30 minutes"
    preview: "这个话题将探讨Flask应用程序迁移到AWS Lambda的过程。我们将分析现有的应用程序，将其分解为单独的微服务，调整身份验证、前端、测试和数据模型，最后将其部署到云中。通过这个分享，您将了解无服务器的优点，以及它将如何改变对可伸缩性、可用性、安全性、基础设施管理和成本优化的看法。"
    preview_en: "This session will talk about the process of migrating an existing Flask application to AWS Lambda.W e will analyze the existing application, decompose it into individual microservices, adapt authentication, frontend, tests, and data model, and finally deploy it to the Cloud.Throughout this step-by-step process, you will learn the benefits of serverless and how it will change the way you think of scalability, availability, security, infrastructure management, and cost optimization."
    slide: #
speaker_beijing_hengcui:
  name: 崔衡 
  name_en: Heng Cui
  city_beijing: 1
  avatar: ./asset/images/speakers/cuiheng.png
  avatar_en: ../asset/images/speakers/cuiheng.png
  short_intro: "阿里巴巴 - 技术专家"
  short_intro_en: "阿里巴巴 - 技术专家"
  intro: "中国科学技术大学硕士毕业，有10余年的IT开发和从业经验，历任Citrix高级开发工程师、创业公司CTO、阿里巴巴技术专家等，有多年的Python开发经验，使用Python构建过自动化系统、网站、基于自然语言处理的聊天机器人。"
  intro_en: "Master of USTC, have more than 10 years IT development and related experiences, used to work as Senior Engineer of Citrix, CTO of a startup company, now a technology expert of Alibaba. Over the passing years, I’ve been using python for building automation system、website and NLP based chatbot"
  shanghai_topic:
    title: "基于PyQt + QScintilla的IDE 对RobotFramework的DSL进行编程"
    title_en: "Programming the DSL of RobotFramework based on the IDE of PyQt + QScintilla"
    preview: "RobotFramework是一个基于Python自动化的开源测试框架，用于进行自动化的测试以便进行持续集成。RobotFramework采用一种自定义的脚本语言(DSL)进行编写，但往往需要自动化测试工程师记住大量的函数名和规则，调试起来不是很方便。本话题分享一个基于QScintilla+PyQt5做的异步面向RobotFramework的脚本开发工具，支持语法高亮、自动化补全、自定义图标等，通过该分享，听众可以了解如何基于QScintilla编写语法高亮、自动补全、错误提示等，可以定制面向DSL领域的IDE。"
    preview_en: "RobotFramework is an open-source testing framework based on Python automation for automated testing for continuous integration. RobotFramework is written in a custom scripting language (DSL) but often requires automated test engineers to remember a large number of function names and rules, which is not very convenient to debug. This topic shares a script development tool based on QScintilla+PyQt5 for RobotFramework. It supports syntax highlighting, auto-completion, custom icons, etc. Through this sharing, listeners can learn how to write syntax highlighting and auto-completion based on QScintilla. , error prompts, etc., and you can customize the IDE for the DSL field."
    slide: #
speaker_beijing_huangshaoxuan:
  name: 黄少瑄
  name_en: Shaoxuan Huang
  city_shanghai: 1
  avatar: ./asset/images/speakers/huangshaoxuan.png
  avatar_en: ../asset/images/speakers/huangshaoxuan.png
  short_intro: "清华大学/平安科技实习"
  short_intro_en: "Tsinghua University"
  intro: "现为清大研究生，曾在台湾金融业担任数据科学家，并有 3 年工作经验，负责金融行为使用者的分析洞察与预测模型建立等；问题拆解与算法研究是我热爱的事情，过去两年担任技术社群 PyLadies Taiwan 专栏作者，分享知识脉络与实作成果，持续在数据科学这条路上探索更多的可能。"
  intro_en: "现为清大研究生，曾在台湾金融业担任数据科学家，并有 3 年工作经验，负责金融行为使用者的分析洞察与预测模型建立等；问题拆解与算法研究是我热爱的事情，过去两年担任技术社群 PyLadies Taiwan 专栏作者，分享知识脉络与实作成果，持续在数据科学这条路上探索更多的可能。"
  shanghai_topic:
    title: "图算法你好：反欺诈应用介绍与实作"
    title_en: "图算法你好：反欺诈应用介绍与实作"
    preview: "基于图分析和半监督学习的方式来检测金融反欺诈，使用 python 与 Neo4j 系统交互，存储、展示和分析客户交易关係图。内容包含 (1) 图算法的简介以及应用时机（国内外使用情境 e.g. LinkedIn、论文研究，例如使用 Label Propagation方法检测交易欺诈）、(2) 可使用的图算法工具、(3) 图算法的社区与资源分享等（neo4j中文社区、paper with codes、twiML@AI）。最后会有简单的实作展示，在 python 端进行数据清理后，将节点、边、关係属性与权重等写入图数据库，透过不同定义的中心度去计算角色重要性与视觉化，并且可以更好地理解图算法本质。"
    preview_en: "基于图分析和半监督学习的方式来检测金融反欺诈，使用 python 与 Neo4j 系统交互，存储、展示和分析客户交易关係图。内容包含 (1) 图算法的简介以及应用时机（国内外使用情境 e.g. LinkedIn、论文研究，例如使用 Label Propagation方法检测交易欺诈）、(2) 可使用的图算法工具、(3) 图算法的社区与资源分享等（neo4j中文社区、paper with codes、twiML@AI）。最后会有简单的实作展示，在 python 端进行数据清理后，将节点、边、关係属性与权重等写入图数据库，透过不同定义的中心度去计算角色重要性与视觉化，并且可以更好地理解图算法本质。"
    slide: #
speaker_beijing_liuyulong:
  name: 刘玉龙
  name_en: Yulong Liu
  city_shanghai: 1
  avatar: ./asset/images/speakers/liuyulong.png
  avatar_en: ../asset/images/speakers/liuyulong.png
  short_intro: "高瓴资本-百丽国际 后端工程师"
  short_intro_en: "高瓴资本-百丽国际 后端工程师"
  intro: "高瓴资本-百丽国际 后端工程师"
  intro_en: "高瓴资本-百丽国际 后端工程师"
  shanghai_topic:
    title: "requests 长链接与 TIME_WAIT"
    title_en: "requests 长链接与 TIME_WAIT"
    preview: "为了给内部服务间 http 调用加上默认的重试次数，把 requests.get 改成了 request.Session().get，中间加了 HTTPAdapter 但是忘记了关闭 tcp 链接，初期请求量小没啥问题，后来并发一高就会出现建立链接失败的问题，而且报错还都是重试次数耗尽，一开始有同学改了 timeout，但这也不是 timeout 的问题啊，这链接都没建立成功…这个问题困扰了我们好久。后来我想起之前听过百度的一个分享，里面有讲类似的问题，于是去翻了一圈视频，仔细了解了这类情况，又去重读了 requests 的文档和部分代码，最后终于确定是客户端设置了keep-alive 但并没有复用，于是服务端总是被迫主动关闭链接，同时会等待两个 MSL，高并发时会造成 tcp 链接被大量占用，甚至占满。最后加了一句 with 保证关闭链接解决问题。（这是刚刚发生的事，不确定接下去几个月会不会暴露出新的问题）"
    preview_en: "为了给内部服务间 http 调用加上默认的重试次数，把 requests.get 改成了 request.Session().get，中间加了 HTTPAdapter 但是忘记了关闭 tcp 链接，初期请求量小没啥问题，后来并发一高就会出现建立链接失败的问题，而且报错还都是重试次数耗尽，一开始有同学改了 timeout，但这也不是 timeout 的问题啊，这链接都没建立成功…这个问题困扰了我们好久。后来我想起之前听过百度的一个分享，里面有讲类似的问题，于是去翻了一圈视频，仔细了解了这类情况，又去重读了 requests 的文档和部分代码，最后终于确定是客户端设置了keep-alive 但并没有复用，于是服务端总是被迫主动关闭链接，同时会等待两个 MSL，高并发时会造成 tcp 链接被大量占用，甚至占满。最后加了一句 with 保证关闭链接解决问题。（这是刚刚发生的事，不确定接下去几个月会不会暴露出新的问题）"
    slide: #
####################################################################
# 杭州
####################################################################
speaker_hangzhou_liuyulong:
  name: 赵王宏楦
  name_en: Taine Zhao
  city_hangzhou: 1
  avatar: ./asset/images/speakers/Taine_Zhao.jpg
  avatar_en: ../asset/images/speakers/Taine_Zhao.jpg
  short_intro: "筑波大学"
  short_intro_en: "University of Tsukua"
  intro: "长期研究Python语言扩展， leading如纯python实现的python项目[1] , 目前最快的python模式匹配实现[2], Idris语言的python后端[3]等, 熟悉python实现的语法部分，以及字节码相关知识。正在程序语言设计领域进行学术深造，曾凭借自己的经历、简历以及快速的对相关论文复现、改进，打动有本人学术偶像并成功被推荐到目前学校进行研究生学习。有大量函数式知识及工程实践经验，experienced in 编译器前端(lexer, parser及对应 generator[4-6])，中端(各种程序分析如作用域分析，可变性分析，类型检查及推导[4, 7], 模式匹配编译[8]等), 后端(llvm ir[9], mips指令集, python bytecode)。"
  intro_en: "Have been working on making Python syntax extensions for long, leading projects like python implementation in pure python[1], the fastest implementation of python pattern matching[2], Idris Python backend[3], familiar with the grammar part of CPython implenentation as well as the bytecode concerned stuffs.Currently taking advanced education in the filed of Programming Language, used to get application recommendations of my scholar ido via touching him by my experience of coding, resume and fast reproduction and improvements of his recent paper.Have rich experience about functional programmimg knowledge and its real world practice, experienced in the compiler frontend(lexer, parser, and their generator[4-6]), mid-end(various program analysis such as scoping resolution, mutability, type checking and inference[4, 7], pattern matching compilation[8], etc), back end(llvm ir[9], mips instructions, python bytecode)."
  shanghai_topic:
    title: "Python语法扩展框架moshmosh和其上的CPython compatible JIT实现"
    title_en: "Python语法扩展框架moshmosh和其上的CPython compatible JIT实现"
    preview: "模式匹配，大家想了很多年了。JIT，大家也想了很多年了。现在的模式匹配库，却远远不及其他语言内置的语言构造; 现在的JIT，却过于领域特定，局限于数值计算或者和脱离于CPython解释器。我们利用编译知识，基于一些意义重大的项目(如llvm, llvmlite), 实现了优化不同和use case程度的JIT实现; 同时也介绍了如何在现行python语法下扩展语义。"
    preview_en: "模式匹配，大家想了很多年了。JIT，大家也想了很多年了。现在的模式匹配库，却远远不及其他语言内置的语言构造; 现在的JIT，却过于领域特定，局限于数值计算或者和脱离于CPython解释器。我们利用编译知识，基于一些意义重大的项目(如llvm, llvmlite), 实现了优化不同和use case程度的JIT实现; 同时也介绍了如何在现行python语法下扩展语义。"
    slide: #
####################################################################
# 深圳
####################################################################
speaker_shenzhen_giampaolorodola:
  name: Giampaolo Rodola
  name_en: Giampaolo Rodola
  city_shenzhen: 1
  avatar: ./asset/images/speakers/giampaolorodola.jpeg
  avatar_en: ../asset/images/speakers/giampaolorodola.jpeg
  short_intro: "Python 核心开发者"
  short_intro_en: "Python Core - Developer"
  intro: "我是来自意大利的 Giampaolo Rodola，从 2010 年开始我加入了 Python 的核心开发者的行列，同时我也是 <a href=\"https://github.com/giampaolo/psutil\">psutil</a> 和 <a href=\"https://github.com/giampaolo/pyftpdlib\">python FTP server libs</a> 的作者和维护者。你可以在<a href=\"http://grodola.blogspot.com/p/about.html?m=1\">这里</a>了解更多关于我的信息 "
  intro_en: "My name is Giampaolo Rodola, from Italy. I am a python core-dev since 2010 and the author and maintainer of <a href=\"https://github.com/giampaolo/psutil\">psutil</a> and <a href=\"https://github.com/giampaolo/pyftpdlib\">python FTP server libs</a>. You can read more about me <a href=\"http://grodola.blogspot.com/p/about.html?m=1\">HERE</a>"
  shanghai_topic:
    title: ""
    title_en: ""
    preview: ""
    preview_en: ""
    slide: #
speaker_shenzhen_liuzheng:
  name: 刘征 
  name_en: Zheng Liu
  city_shenzhen: 1
  avatar: ./asset/images/speakers/liuzheng.jpg
  avatar_en: ../asset/images/speakers/liuzheng.jpg
  short_intro: "Elastic公司社区布道师 / 中国DevOps社区核心组织者"
  short_intro_en: "Elastic公司社区布道师 / 中国DevOps社区核心组织者"
  intro: "《DevOps Handbook》《The Site Reliability Workbook》译者；精通DevOps/SRE/ITSM等理论体系和相关实践的落地实现。致力于在全国范围内通过社区推广DevOps的理念、技术和实践。推动开源Elastic Stack技术堆栈的应用，包括运维大数据分析平台、云原生服务治理、APM全链路监控和AIOps等使用场景。"
  intro_en: "《DevOps Handbook》《The Site Reliability Workbook》译者；精通DevOps/SRE/ITSM等理论体系和相关实践的落地实现。致力于在全国范围内通过社区推广DevOps的理念、技术和实践。推动开源Elastic Stack技术堆栈的应用，包括运维大数据分析平台、云原生服务治理、APM全链路监控和AIOps等使用场景。"
  shanghai_topic:
    title: "Google SRE体系核心基础解读"
    title_en: "Google SRE体系核心基础解读"
    preview: "近几年SRE职位的广泛出现，证明了这套起源于Google的运维体系的巨大价值和生命力。SRE其实也可以是一个广泛通用的套路，但是你必至少须熟练掌握SLO、监控、告警、减少琐事和简单化等核心原则。本演讲还将探讨如何将它们转化成为在你的组织里也可用实践的技巧，并包含针对一套典型应用系统的SLO指定的流程讲解。"
    preview_en: "近几年SRE职位的广泛出现，证明了这套起源于Google的运维体系的巨大价值和生命力。SRE其实也可以是一个广泛通用的套路，但是你必至少须熟练掌握SLO、监控、告警、减少琐事和简单化等核心原则。本演讲还将探讨如何将它们转化成为在你的组织里也可用实践的技巧，并包含针对一套典型应用系统的SLO指定的流程讲解。"
    slide: #
speaker_shenzhen_zagfai:
  name: 邝泽徽
  name_en: Zagfai
  city_shenzhen: 1
  avatar: ./asset/images/speakers/kuangzewei.jpg
  avatar_en: ../asset/images/speakers/kuangzewei.jpg
  short_intro: "Touchcall - 程序员"
  short_intro_en: "Programmer of Touchall"
  intro: "八年Python使用经验，十五年编程经验，曾任职于猎豹移动，给猎豹备份大师、Whatscall等项目的服务端写过第1个commit，构建起使用Python支撑过亿用户的系统。算法爱好者，自动化爱好者。"
  intro_en: "Eight years of Python's experience, 15 years of programming experience, Zagfai has worked for Cheetah Mobile, wroted the first commit for the server side of cheetah backup masters, Whatscall and other projects, built a Python system that support hundreds of millions of users. He is an algorithm lover and an automation enthusiast."
  shanghai_topic:
    title: "从Python开始钱赚钱"
    title_en: ""
    preview: "理财是全民性的话题，有保守的余额宝、稳健的股票期货、激进的虚拟币和百倍杠杆炒外汇。题主在经历过各种理财方法之后，决定分享在激进投资项目里用Python做较低风险的投资方法：量化交易之网格交易虚拟币。本主题从零开始，简单讨论网格交易的原理及方法，讲述如何通过Python调用相关交易所API接口、获取投资标的信息、记录交易、测试和正确运行程序的历程，给听众对量化交易一个基本的概念，从用程序去赚钱引申出编程可以很有趣的观点。"
    preview_en: ""
    slide: #
speaker_shenzhen_chaoxie:
  name: 解超
  name_en: Chao Xie
  city_shenzhen: 1
  avatar: ./asset/images/speakers/xiechao.jpg
  avatar_en: ../asset/images/speakers/xiechao.jpg
  short_intro: "Gekko Lab - 数据工程师"
  short_intro_en: "Data Engineer of Gekko Lab"
  intro: "负责Gekko Lab数据开发，数据采集，数据分析，数据集合"
  intro_en: "Responsible for data developmenting, acquisiting,  analysising, and collection in Gekko Lab."
  shanghai_topic:
    title: "一行代码加速科学计算"
    title_en: "Boost the scientific computing with one line of code"
    preview: "一行代码，加速科学计算框架pandas.<ul>
              <li>modin是什么？modin与pandas的区别? 怎么用modin?</li>
              <li>modin vs pandas 速度比较？</li>
              <li>modin底层实现原理，如何做到充分利用计算机多核并行科学计算？</li>
              <li>modin的局限， modin社区展望。</li></ul>"
    preview_en: "一行代码，加速科学计算框架pandas.<ul>
              <li>What is modin? What's the difference between modin and pandas? How to start using modin?</li>
              <li>Speed: modin V.S. pandas</li>
              <li>Low-level principles: how to make full use the power of multi-core to parallel the scientific computing?</li>
              <li>The limitation and community's ambition of modin</li></ul>"
    slide: #
speaker_shenzhen_mingxi:
  name: 明希
  name_en: Xi Ming
  city_shenzhen: 1
  avatar: ./asset/images/speakers/mingxi.jpg
  avatar_en: ../asset/images/speakers/mingxi.jpg
  short_intro: "腾讯 - 持续集成开发工程师"
  short_intro_en: "腾讯 - 持续集成开发工程师"
  intro: "前测试工程师，现于腾讯财付通从事持续集成相关的开发工作。开源贡献者，现为Pipenv项目的核心维护之一。 "
  intro_en: "前测试工程师，现于腾讯财付通从事持续集成相关的开发工作。开源贡献者，现为Pipenv项目的核心维护之一。 "
  shanghai_topic:
    title: "Pipenv和Python包管理 "
    title_en: "Pipenv和Python包管理 "
    preview: "在Python的世界中，依赖管理从来不是件容易的事。用pip + requirements.txt是否已经足够？我们为什么需要一个专门的工具来管理包和依赖？ 本演讲尝试从基本机制说起，厘清pip, virtualenv, pipenv各自的目标。讲述依赖管理中的痛点，和解决办法。并进一步说说Pipenv之外的其他工具们，各自解决了Python包管理中的什么问题。"
    preview_en: "在Python的世界中，依赖管理从来不是件容易的事。用pip + requirements.txt是否已经足够？我们为什么需要一个专门的工具来管理包和依赖？ 本演讲尝试从基本机制说起，厘清pip, virtualenv, pipenv各自的目标。讲述依赖管理中的痛点，和解决办法。并进一步说说Pipenv之外的其他工具们，各自解决了Python包管理中的什么问题。"
    slide: #
speaker_shenzhen_huangyi:
  name: 黄毅
  name_en: Yi Huang
  city_shenzhen: 1
  avatar: ./asset/images/speakers/huangyi.png
  avatar_en: ../asset/images/speakers/huangyi.png
  short_intro: "独立开发者"
  short_intro_en: "独立开发者"
  intro: "Pythoner, C++使用者，Haskell爱好者，游戏引擎开发者，区块链研究者，交易系统优化者"
  intro_en: "Pythoner, C++使用者，Haskell爱好者，游戏引擎开发者，区块链研究者，交易系统优化者"
  shanghai_topic:
    title: "Python前端开发"
    title_en: "Python前端开发"
    preview: "介绍开源Python移动前端开发框架。框架基于OpenGLES，可以运行在iOS/Android/Desktop，核心c++编写，提供Python binding。能够开发游戏，也能开发App。同时也会介绍Python在移动前端领域相关的生态。"
    preview_en: "介绍开源Python移动前端开发框架。框架基于OpenGLES，可以运行在iOS/Android/Desktop，核心c++编写，提供Python binding。能够开发游戏，也能开发App。同时也会介绍Python在移动前端领域相关的生态。"
    slide: #
speaker_shenzhen_fengzhao:
  name: 赵丰
  name_en: Feng Zhao
  city_shenzhen: 1
  avatar: ./asset/images/speakers/zhaofeng.png
  avatar_en: ../asset/images/speakers/zhaofeng.png
  short_intro: "清华大学深圳研究生院 - 博士生"
  short_intro_en: "PhD student of Shenzhen Graduate School of Tsinghua University"
  intro: "从事机器学习相关领域研究"
  intro_en: "Engaged research related to machine learning"
  shanghai_topic:
    title: "Python C 拓展在各平台的打包与发布"
    title_en: "Pack and release Python C extensions in various plateforms"
    preview: "<ul>
              <li>介绍 Python package 发布流程，C拓展， fortran拓展和C++</li>
              <li>拓展打包在不同操作系统上如何编译wheel, 面向 linux 操作系统如何编译 manylinux 的二进制包，windows平台如何解决依赖问题，如何结合持续集成工具发布到pypi.org。</li></ul>"
    preview_en: "<ul>
              <li>How to build a Python package, how to make Python extension with C, C++, and Fortran</li>
              <li>How to make wheel package in various plateforms, how to build binary packages target to manylinux, how to solve the dependency on windows, how to release the package to pypi.org with the help of CI</li></ul>"
    slide: #
####################################################################
# 成都
####################################################################
speaker_chengdu_liuyulong:
  name: 赵王宏楦
  name_en: Taine Zhao
  city_chengdu: 1
  avatar: ./asset/images/speakers/Taine_Zhao.jpg
  avatar_en: ../asset/images/speakers/Taine_Zhao.jpg
  short_intro: "筑波大学"
  short_intro_en: "University of Tsukua"
  intro: "长期研究Python语言扩展， leading如纯python实现的python项目[1] , 目前最快的python模式匹配实现[2], Idris语言的python后端[3]等, 熟悉python实现的语法部分，以及字节码相关知识。正在程序语言设计领域进行学术深造，曾凭借自己的经历、简历以及快速的对相关论文复现、改进，打动有本人学术偶像并成功被推荐到目前学校进行研究生学习。有大量函数式知识及工程实践经验，experienced in 编译器前端(lexer, parser及对应 generator[4-6])，中端(各种程序分析如作用域分析，可变性分析，类型检查及推导[4, 7], 模式匹配编译[8]等), 后端(llvm ir[9], mips指令集, python bytecode)。"
  intro_en: "Have been working on making Python syntax extensions for long, leading projects like python implementation in pure python[1], the fastest implementation of python pattern matching[2], Idris Python backend[3], familiar with the grammar part of CPython implenentation as well as the bytecode concerned stuffs.Currently taking advanced education in the filed of Programming Language, used to get application recommendations of my scholar ido via touching him by my experience of coding, resume and fast reproduction and improvements of his recent paper.Have rich experience about functional programmimg knowledge and its real world practice, experienced in the compiler frontend(lexer, parser, and their generator[4-6]), mid-end(various program analysis such as scoping resolution, mutability, type checking and inference[4, 7], pattern matching compilation[8], etc), back end(llvm ir[9], mips instructions, python bytecode)."
  shanghai_topic:
    title: "Python语法扩展框架moshmosh和其上的CPython compatible JIT实现"
    title_en: "Python语法扩展框架moshmosh和其上的CPython compatible JIT实现"
    preview: "模式匹配，大家想了很多年了。JIT，大家也想了很多年了。现在的模式匹配库，却远远不及其他语言内置的语言构造; 现在的JIT，却过于领域特定，局限于数值计算或者和脱离于CPython解释器。我们利用编译知识，基于一些意义重大的项目(如llvm, llvmlite), 实现了优化不同和use case程度的JIT实现; 同时也介绍了如何在现行python语法下扩展语义。"
    preview_en: "模式匹配，大家想了很多年了。JIT，大家也想了很多年了。现在的模式匹配库，却远远不及其他语言内置的语言构造; 现在的JIT，却过于领域特定，局限于数值计算或者和脱离于CPython解释器。我们利用编译知识，基于一些意义重大的项目(如llvm, llvmlite), 实现了优化不同和use case程度的JIT实现; 同时也介绍了如何在现行python语法下扩展语义。"
    slide: #
speaker_chengdu_tengjingmeina:
  name: 藤井美娜 
  name_en: 藤井美娜
  city_chengdu: 1
  avatar: ./asset/images/speakers/tengjingmeina.jpg
  avatar_en: ../asset/images/speakers/tengjingmeina.jpg
  short_intro: "机器学习工程师/数据科学家"
  short_intro_en: "Machine Learning Engineer/Data Scientist"
  intro: "现任GVA TECH的日本第一个人工智能法律服务AI-CON的多语言系统开发负责人。研究专业是语言学和中日文自然语言处理。"
  intro_en: "Currently the head of multi-language system development for AI-CON, the first artificial intelligence legal service in Japan. Focus on linguistics and Chinese and Japanese natural language processing."
  shanghai_topic:
    title: "Python的NLP实践分享-如何实现合同风险预测模型"
    title_en: "Python's NLP Practical Sharing-how to implement contract risk prediction model"
    preview: "本演讲深入浅出的介绍用 Python 做自然语言处理 (NLP) 的理论与实战应用，并特别在多语言挑战和法律文本处理上加大力道，力图在30分钟内给听众以全新视野与启发。内容主要分为3段：<ol><li>Python NLP 入门<br />介绍用 Python 做汉语 NLP 的理论基础和必备工具。</li><li>多语言 NLP 攻略<br />处理其他语言的 NLP 工具、中文分词和日文分词的不同点、多语言 NLP 的注意事项等。</li><li>“Python 合同风险预测模型”实战经验分享<br />通过解析模型构建过程，包括 EDA、Cosine Similarity、BLUE、ROUGE 等类似度算法的结果比较、文章语义分析等，具体提升听众处理法律文本的能力。</li></ol>人和语言总是离不开的，NLP可以处理森罗万象的生活中的语言现象，我希望通过这次的实战应用的内容，大家可以得到一些启发用Python去挑战自己感兴趣的领域的NLP。"
    preview_en: "This speech will introduce the theory and practical application of natural language processing in Python, especially the multi-language challenge and legal text processing. I'll try to inspire listeners in 30 minutes. The content is divided into 3 segments:<ol><li>Introduction of Python NLP<br />Introduction of Python as NLP theoretical basis and utility tools.</li><li>NLP in several languages<bt />NLP tool for other languages, different points of Chinese and Japanese practicals, precautions of NLP in multi-languages.</li><li>Practical sharing of Python contract risk prediction model<br />Through the analysis of the model construction process, including EDA、Cosine Similarity、BLUE、ROUGE and some other similar algorithms' result comparisons and article semantic analysis, enhance the ability of the audience to process the legal texts.</li></ol>We cannot split human and language, NLP is able to process all the phenomenon of languages. I hope you can gain some points and try to use Python processing natural language in your field."
    slide: #
speaker_chengdu_zhihangliu:
  name: 刘知杭
  name_en: Zhihang Liu
  city_chengdu: 1
  avatar: ./asset/images/speakers/liuzhihang.png
  avatar_en: ../asset/images/speakers/liuzhihang.png
  short_intro: "广州天验网络科技有限公司 反逆向引擎组组长"
  short_intro_en: ""
  intro: "独立完成了Malt语言的开发。研究方向为PLT（编程语言理论）方向。"
  intro_en: "Designed the Malt language in person.His research direction is Programming Language Theory (PLT)."
  shanghai_topic:
    title: "静态类型的Python"
    title_en: "The Static Typed Python"
    preview: "不同于从实践的角度来安利静态类型标注，本次演讲将从学术界的角度讲述Python类型化的必要性，静态类型语言相较于等价动态语言的区别的本质是什么，以及如何利用现代PLT中的全局类型推导（Global Type Inference）技术，在不失灵活性的前提下，给Python加上静态类型系统。"
    preview_en: "From the perspective of academia, this talk will show the necessity of the static-typed Python, what is the essence of the difference of the static- and dynamic-typed language, and how to add static-typed sysyem into Python with the help of Global Type Inference while remaining Python's flaxibility."
    slide: #
